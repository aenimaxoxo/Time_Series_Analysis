* Exponential Smoothing 
:PROPERTIES:
:header-args: :session R-session :results output value table :colnames yes
:END:

#+NAME: round-tbl
#+BEGIN_SRC emacs-lisp :var tbl="" fmt="%.1f"
(mapcar (lambda (row)
          (mapcar (lambda (cell)
                    (if (numberp cell)
                        (format fmt cell)
                      cell))
                  row))
        tbl)
#+end_src

#+RESULTS: round-tbl

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
library(tidyverse)
library(magrittr)
library(fpp3)
#+END_SRC

Forecasts produced using exponential smoothing are weighted averages of past observations, with the weights decaying exponentially as the observations get older. In other words, the more recent the observation, the higher the associated weight.

** Simple Exponential Smoothing 

This method is suitable for forecasting data with no clear trend or seasonal pattern. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
algeria_economy <- tsibbledata::global_economy %>%
    filter(Country == "Algeria")
#+END_SRC

#+BEGIN_SRC R :file plot.svg :results graphics file
algeria_economy %>%
    autoplot(Exports) +
    ylab("Exports (% of GDP)") + xlab("Year")
#+END_SRC

#+RESULTS:
[[file:plot.svg]]


The naive method assigns all the weight to the most recent observation and the averaging method assigns equal weight to all of the observations. We often want something in between, which is the idea behind simple exponential smoothing. 

Forecasts are calculated using weighted averages, where the weights decrease exponentially as observations come from further in the past -- the smallest weights are associated with the oldest observations. 


#+DOWNLOADED: /tmp/screenshot.png @ 2020-04-10 21:13:30
[[file:Exponential Smoothing/screenshot_2020-04-10_21-13-30.png]]

where 0 leq alpha leq 1 is the smoothing parameter. 

*** Flat Forecasts

 Simple exponential smoothing has flat forecasts -- all the forecasts take the same value, equal to the last level component. 
 Remember that these forecasts will only be suitable is the time series has no trend or seasonal component. 

*** Example

 #+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
# estimate parameters
algeria_economy %>%
    model(ETS(Exports ~ error("A") + trend("N") + season("N"), opt_crit = "mse")) -> fit 

fit %>% forecast(h = 5) -> fc
 #+END_SRC

 #+BEGIN_SRC R :file plot.svg :results graphics file
fc %>%
    autoplot(algeria_economy) +
    geom_line(aes(y = .fitted,
                  color = "Fitted"),
                  data = augment(fit)) +
    ylab("Exports (% of GDP)") + xlab("Year")
 #+END_SRC

 #+RESULTS:
 [[file:plot.svg]]

 The forecasts for the years 2018 - 2022 are plotted above. Also plotted are one-step ahead fitted values alongside the data over the period 1960 - 2017. 

 The large value of alpha on this example is reflected in the large adjustment that takes place in the estimated level l_t at each time. A smaller value of alpha would lead to smaller changes over time, and so the series of fitted values would be smoother. 

** Methods with Trend 

Holt extended simple exponential smoothing to allow the forecasting of data with a trend. This involves a forecast equation and two smoothing equations (one for level and one for trend). 


#+DOWNLOADED: /tmp/screenshot.png @ 2020-04-10 21:26:16
[[file:Exponential Smoothing/screenshot_2020-04-10_21-26-16.png]]

*** Example

 #+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
aus_econ <- global_economy %>%
    filter(Code == "AUS") %>%
    mutate(Pop = (Population / 1e6))

fit <- aus_econ %>%
    model(AAN = ETS(Pop ~ error("A") + trend("A") + season("N")))

fit %>% tidy()

fc <- fit %>% forecast(h = 10)

fc %>% autoplot(aus_econ)
 #+END_SRC

 The estimated smoothing coefficient for alpha hat is 1. This shows that the level changes rapidly in order to capture the highly trended series. The estimated smoothing coefficient for the slope is beta hat = 0.33. This is relatively large suggesting that the trend also changes often (even if changes are slight).

*** Damped Trend Methods 

 The forecast's generated by Holt's linear method display a constant trend indefinitely into the future. Gardner and McKenzie introduced a parameter that dampens the trend to a flat line some time in the future.


 #+DOWNLOADED: screenshot @ 2020-05-13 21:17:25
 [[file:Exponential_Smoothing/2020-05-13_21-17-25_screenshot.png]]

 where 0 leq phi leq 1. 
 If phi = 1, this is equivalent to Holt's linear method. 

 In practice, phi is rarely less than 0.8 as the damping has a very strong effect for smaller values. Values of phi close to 1 will mean that a damped model is not able to be distinguished from a non damped model 

*** Example: Australian Population Continued 

 #+BEGIN_SRC R :file plot.svg :results graphics
aus_econ %>%
    model(`Holt's Method` = ETS(Pop ~ error("A") + trend("A") + season("N")),
          `Damped Holt's Method` = ETS(Pop ~ error("A") + trend("Ad", phi = 0.9) + season("N"))) %>%
    forecast(h = 15) %>%
    autoplot(aus_econ, level = NULL) +
    ggtitle("Forecasts from Holt's Method") +
    xlab("Year") + ylab("Popn of Australia (Millions)") +
    guides(color = guide_legend(title = "Forecast"))
 #+END_SRC

 We have used a relatively low damping parameter to exaggerate the effects of damping and set a long forecast to see the effect over time.

*** Example: Internet Usage 

 #+BEGIN_SRC R :file plot.svg :results graphics file
www_usage <- as_tsibble(WWWusage)

www_usage %>% autoplot(value) +
    xlab("Minute") + ylab("Number of Users")
 #+END_SRC

 We can use time series cross validation to compare the one step forecast accuracy of the three methods

 #+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
www_usage %>%
    stretch_tsibble(.init = 10) %>%
    model(SES = ETS(value ~ error("A") + trend("N") + season("N")),
          Holt = ETS(value ~ error("A") + trend("A") + season("N")),
          Damped = ETS(value ~ error("A") + trend("Ad") + season("N"))) %>%
    forecast(h = 1) %>%
    accuracy(www_usage)
 #+END_SRC

 #+RESULTS:
 | .model | .type |  ME | RMSE | MAE | MPE | MAPE | MASE | ACF1 |
 |--------+-------+-----+------+-----+-----+------+------+------|
 | Damped | Test  | 0.3 |  3.7 | 3.0 | 0.3 |  2.3 |  0.7 |  0.3 |
 | Holt   | Test  | 0.1 |  3.9 | 3.2 | 0.2 |  2.4 |  0.7 |  0.3 |
 | SES    | Test  | 1.5 |  6.0 | 4.8 | 0.9 |  3.5 |  1.1 |  0.8 |

 From the table above, we see that Damped Holt's method performs best with respect to both MAE or RMSE values. 

 #+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
fit <- www_usage %>%
    model(Damped = ETS(value ~ error("A") + trend("Ad") + season("N")))

fit %>% tidy
 #+END_SRC

 #+RESULTS:
 | .model | term  | estimate |
 |--------+-------+----------|
 | Damped | alpha |      1.0 |
 | Damped | beta  |      1.0 |
 | Damped | phi   |      0.8 |
 | Damped | l     |     90.4 |
 | Damped | b     |     -0.0 |

 The smoothing parameter for the slope is 1, indicating the trend changes to mostly reflect the slope between the last two minutes of internet usage. The value of alpha is 1, showing that the level reacts strongly to each observation. 

 #+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
fit %>%
    forecast(h = 10) %>%
    autoplot(www_usage) +
    xlab("Minute") + ylab("Number of Users")
 #+END_SRC

** Methods with Seasonality 

Holt and Winters extended Holt's method to capture seasonality. 

The Holt-Winters Seasonal Method comprises the forecast equation and three parameters
- level
- trend
- seasonal component s_t with corresponding smoothing parameters alpha, beta star, gamma. We use m to denote frequency of seasonality. 


#+DOWNLOADED: screenshot @ 2020-05-13 21:56:51
[[file:Exponential_Smoothing/2020-05-13_21-56-51_screenshot.png]]

