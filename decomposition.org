* Time Series Decomposition 
:PROPERTIES:
:header-args: :session R-session :results output value table :colnames yes
:END:


#+NAME: round-tbl
#+BEGIN_SRC emacs-lisp :var tbl="" fmt="%.1f"
(mapcar (lambda (row)
          (mapcar (lambda (cell)
                    (if (numberp cell)
                        (format fmt cell)
                      cell))
                  row))
        tbl)
#+end_src

#+RESULTS: round-tbl

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
library(tidyverse)
library(magrittr)
library(fpp3)
#+END_SRC

We think of time series as comprising three components:

- a trend-cycle component 
- a seasonal component 
- a remainder component

** Transformations and Adjustments

Here we deal with four kinds of adjustments:

- calendar adjustments
- population adjustments 
- inflation adjustments 
- mathematical transformations

*** Calendar Adjustments 

Some of the variation seen is seasonal data may be due to simple calendar effects. In such cases, it is usually easier to remove the variation before doing any further analysis. 

*** Population Adjustments

Any data that are affected by population changes can be adjusted to give per-capita data. That is, consider the data per person (or per thousand or million people) rather than the total. 

For most data that are affected by population changes, it is best to use per-capita data rather than the totals.

#+BEGIN_SRC R :file plot.svg :results graphics file
global_economy %>%
    filter(Country == "Australia") %>%
    autoplot(GDP / Population)
#+END_SRC

#+RESULTS:
[[file:plot.svg]]


vs 

#+BEGIN_SRC R :file plot.svg :results graphics file
global_economy %>%
    filter(Country == "Australia") %>%
    autoplot(GDP)
#+END_SRC

#+RESULTS:
[[file:plot.svg]]

*** Inflation Adjustments 

Data which are affected by the value of money are best adjusted before modeling. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
(print_retail <- aus_retail %>%
    filter(Industry == "Newspaper and book retailing") %>%
    group_by(Industry) %>%
    index_by(Year = year(Month)) %>%
    summarise(Turnover = sum(Turnover)))

(aus_economy <- global_economy %>%
    filter(Code == "AUS"))
#+END_SRC

#+BEGIN_SRC R :file plot.svg :results graphics file
print_retail %>%
    left_join(aus_economy, by = "Year") %>%
    mutate(Adjusted_turnover = Turnover / CPI) %>%
    gather("Type", "Turnover",
           Turnover, Adjusted_turnover,
           factor_key = TRUE) %>%
    ggplot(aes(x = Year, y = Turnover)) +
    geom_line() +
    facet_grid(vars(Type), scales = "free_y") +
    xlab("Years") + ylab(NULL) +
    ggtitle("Turnover for the Australian Print Media Industry")
#+END_SRC

#+RESULTS:
[[file:plot.svg]]

By adjusting for inflation using the CPI, we can see that Australia's newspaper and book retailing industry has been in decline much longer than the original data suggests.

*** Mathematical Transformations

If the data shows variation that increases or decreases with the level of the series, then a transformation can be useful. 

Often, we use a log transformation because it is interpretable. A change in 1 for a logged variable relates to a change in the base of the log on the original scale, i.e. a change in 1 for a base 10 log results in a 10 times increase. 

A useful family of transformations, that includes both logarithms and power transformations, is the family of Box-Cox transformations.


#+DOWNLOADED: /tmp/screenshot.png @ 2020-03-25 12:21:19
[[file:Time Series Decomposition/screenshot_2020-03-25_12-21-19.png]]

where the log is a natural log. 

If lambda is 1, then the transformed data is shifted downwards, but there is no change to the shape of the series. For all other values of lambda, the time series will change shape.

A good value of lambda is one which makes the size of the seasonal variation about the same across the whole series, as that makes the forecasting model simpler. 

The guerrero feature can be used to choose a value of lambda for you. In this case it chooses lambda = 0.12

#+BEGIN_SRC R :file plot.svg :results graphics file
aus_production %>%
    features(Gas, features = guerrero) %>%
    pull(lambda_guerrero) -> lam

aus_production %>%
    autoplot(box_cox(Gas, lam))
#+END_SRC

#+RESULTS:
[[file:plot.svg]]

** Time Series Components 

If we assume an additive decomposition, then we can write 


#+DOWNLOADED: /tmp/screenshot.png @ 2020-03-25 12:27:11
[[file:Time Series Decomposition/screenshot_2020-03-25_12-27-11.png]]

The additive decomposition is the most appropriate if the magnitude of the seasonal fluctuations, or the variation around the trend-cycle, does not vary with the level of the time series. 

When the variation in the seasonal period, or the variation around the trend-cycle appears to be proportional to the level of the time series, then a multiplicative decomposition is more appropriate. These are common with economic time series. 

An alternative to using a multiplicative decomposition is to transform the data until the variation in the series appears to be stable over time, then use an additive decomposition.

*** Employment in the US Retail Sector 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
us_retail_employment <- us_employment %>%
    filter(year(Month) >= 1990,
           Title == "Retail Trade") %>%
    select(-Series_ID)

us_retail_employment %>%
    head()
#+END_SRC

#+RESULTS:
| Month    | Title        | Employed |
|----------+--------------+----------|
| 1990 Jan | Retail Trade |  13255.8 |
| 1990 Feb | Retail Trade |  12966.3 |
| 1990 Mar | Retail Trade |  12938.2 |
| 1990 Apr | Retail Trade |  13012.3 |
| 1990 May | Retail Trade |  13108.3 |
| 1990 Jun | Retail Trade |  13182.8 |

#+BEGIN_SRC R :file plot.svg :results graphics file
us_retail_employment %>%
    autoplot(Employed) +
    xlab("Year") + ylab("Persons (Thousands)") +
    ggtitle("Total Employment in US Retail")
#+END_SRC

#+RESULTS:
[[file:plot.svg]]

To illustrate these ideas, we will use the STL decomposition, which is discussed in 3.7:

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
dcmp <- us_retail_employment %>%
    model(STL(Employed))

components(dcmp) %>% head()
#+END_SRC

#+RESULTS:
| .model        | Month    | Employed |   trend | season_year | remainder | season_adjust |
|---------------+----------+----------+---------+-------------+-----------+---------------|
| STL(Employed) | 1990 Jan |  13255.8 | 13290.8 |       -38.1 |       3.1 |       13293.9 |
| STL(Employed) | 1990 Feb |  12966.3 | 13271.5 |      -261.0 |     -44.2 |       13227.3 |
| STL(Employed) | 1990 Mar |  12938.2 | 13252.3 |      -291.1 |     -23.0 |       13229.3 |
| STL(Employed) | 1990 Apr |  13012.3 | 13233.0 |      -220.8 |       0.1 |       13233.1 |
| STL(Employed) | 1990 May |  13108.3 | 13212.8 |      -114.5 |      10.0 |       13222.8 |
| STL(Employed) | 1990 Jun |  13182.8 | 13192.7 |       -25.6 |      15.7 |       13208.4 |

Where our decomposition is Employed = trend + season_year + remainder

The trend column follows the overall movement of the series, ignoring any seasonality and random fluctuations. 

#+BEGIN_SRC R :file plot.svg :results graphics file
us_retail_employment %>%
    autoplot(Employed, color = "gray") +
    autolayer(components(dcmp), trend, color = "red") +
    xlab("Year") +
    ylab("Persons (Thousands)") +
    ggtitle("Total Employment in US Retail")
#+END_SRC

#+RESULTS:
[[file:plot.svg]]

We can plot all the components in a single figure using autoplot 

#+BEGIN_SRC R :file plot.svg :results graphics file
components(dcmp) %>%
    autoplot() +
    xlab("Year")
#+END_SRC

#+RESULTS:
[[file:plot.svg]]

*** Seasonally Adjusted Data 

If the seasonal component is removed from the original data, the resulting values are the "seasonally adjusted" data. 

For an additive decomposition, this is given by y_t - S_t and for multiplicative data, the seasonally adjusted values are obtained using y_t/S_t.

#+BEGIN_SRC R :file plot.svg :results graphics file
us_retail_employment %>%
    autoplot(Employed, color = "gray") +
    autolayer(components(dcmp), season_adjust, color = "blue") +
    xlab("Year") + ylab("Persons (Thousands)") +
    ggtitle("Total Employment in US Retail")
#+END_SRC

#+RESULTS:
[[file:plot.svg]]

If the variation due to seasonality is not of primary interest, the seasonally adjusted series can be useful. 

** Moving Averages 

The classical method of time series decomposition originated in the 1920s and was widely used until the 1950s. It still forms the basis of many time series decomposition methods, so it is important to understand how it works. 

The first step is to use a moving average method to estimate the trend-cycle, so we begin by discussing moving averages.

*** Moving Average Smoothing


#+DOWNLOADED: /tmp/screenshot.png @ 2020-03-25 12:46:35
[[file:Time Series Decomposition/screenshot_2020-03-25_12-46-35.png]]

where m = 2k + 1. That is, the estimate of the trend-cycle at time t is obtained by averaging values of the time series within k periods of t. Observations that are nearby in time tend to be nearby in value as well. 

We call this an m-MA, a moving average of order m. 

#+BEGIN_SRC R :file plot.svg :results graphics file
global_economy %>%
    filter(Country == "Australia") %>%
    autoplot(Exports) +
    xlab("Year") + ylab("% of GDP") +
    ggtitle("Total Australian Exports")
#+END_SRC

#+RESULTS:
[[file:plot.svg]]

We can easily compute the moving average with the slide_dbl function

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
aus_exports <- global_economy %>%
    filter(Country == "Australia") %>%
    mutate("ma-5" = slide_dbl(Exports, mean, .size = 5, .align = "center"))
#+END_SRC


#+BEGIN_SRC R :file plot.svg :results graphics file
aus_exports %>%
    autoplot(Exports) +
    autolayer(aus_exports, `ma-5`, color = "red") +
    xlab("Year") + ylab("Exports (% of GDP)") +
    ggtitle("Total Australian Exports") +
    guides(color = guide_legend(title = "series"))
#+END_SRC

#+RESULTS:
[[file:plot.svg]]

In general, a larger order means a smoother curve. Simple moving averages such as these are usually of an odd order, so that they are symmetric. 

*** Moving Averages of Moving Averages 

It is possible to apply a moving average to a moving average. We might do this to make an even order moving average symmetric. 

For example, we might take a moving average of order 4, and then apply another moving average to order 2 to the results. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
beer <- aus_production %>%
    filter(year(Quarter) >= 1992) %>%
    select(Quarter, Beer)

beer_ma <- beer %>%
    mutate(`4-MA` = slide_dbl(Beer, mean, .size = 4, .align = "center-left"),
           `2x4-MA` = slide_dbl(`4-MA`, mean, .size = 2, .align = "center-right"))
#+END_SRC

When a 2-MA follows a moving average of an even order (such as 4), it is called a centered moving average of order 4. This is because the results are now symmetric. 

In general, an even order MA should be followed by an even order MA to make it symmetric. Similarly, an odd order MA should be followed by an odd order MA. 

*** Estimating the Trend-Cycle with Seasonal Data 

The most common use of centered moving averages is for estimating the trend-cycle from seasonal data. 

In general, a 2xm-MA is equivalent to a weighted moving average of order m + 1 where all observations take the weight 1/m, except for the first and last terms which take the weight 1/2m. 

So if the seasonal period is even and of order m, we use a 2xm-MA to estimate the trend cycle. 

If the seasonal period is odd and of order m, we use a m-MA to estimate the trend cycle. For example, a 2x12-ma can be used to estimate the trend cycle of monthly data and a 7-ma can be used to estimate the trend cycle of daily data with a weekly seasonality. 

*** Example: Employment in the US Retail Sector

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
us_retail_employment_ma <- us_retail_employment %>%
    mutate(`12-MA` = slide_dbl(Employed, mean, .size = 12, .align = "cr"),
           `2x12-MA` = slide_dbl(`12-MA`, mean, .size = 12, .align = "cl"))

us_retail_employment_ma %>% head()
#+END_SRC

#+RESULTS:
| Month    | Title        | Employed | 12-MA | 2x12-MA |
|----------+--------------+----------+-------+---------|
| 1990 Jan | Retail Trade |  13255.8 | nil   | nil     |
| 1990 Feb | Retail Trade |  12966.3 | nil   | nil     |
| 1990 Mar | Retail Trade |  12938.2 | nil   | nil     |
| 1990 Apr | Retail Trade |  13012.3 | nil   | nil     |
| 1990 May | Retail Trade |  13108.3 | nil   | nil     |
| 1990 Jun | Retail Trade |  13182.8 | nil   | nil     |

#+BEGIN_SRC R :file plot.svg :results graphics file
us_retail_employment_ma %>%
    autoplot(Employed, color = "gray") +
    autolayer(us_retail_employment_ma,
              vars(`2x12-MA`),
              color = "red") +
    xlab("Year") + ylab("Persons (Thousands)") +
    ggtitle("Total Employment in US Retail")
#+END_SRC

#+RESULTS:
[[file:plot.svg]]

** Classical Decomposition

In classical decomposition, we assume that the seasonal component is constant from year to year. For multiplicative seasonality, the m values that form the seasonal component are sometimes called the seasonal indices.

*** Additive Decomposition 

#+DOWNLOADED: /tmp/screenshot.png @ 2020-03-25 17:30:56
[[file:Time Series Decomposition/screenshot_2020-03-25_17-30-56.png]]

Here is a classical decomposition of the total retail employment series across the US:

#+BEGIN_SRC R :file plot.svg :results graphics file
us_retail_employment %>%
    model(classical_decomposition(Employed,
                                  type = "additive")) %>%
    components() %>%
    autoplot() +
    xlab("Year") +
    ggtitle("Classical Additive Decomposition of Total US Retail Employment")
#+END_SRC

#+RESULTS:
[[file:plot.svg]]

*** Multiplicative Decomposition


#+DOWNLOADED: /tmp/screenshot.png @ 2020-03-25 17:40:36
[[file:Time Series Decomposition/screenshot_2020-03-25_17-40-36.png]]

While classical decomposition is still used, it is not recommended. Here are some of the problems with it:

- The estimate of the trend cycle is unavailable for the first few and last few observations
- The trend cycle estimates tend to over-smooth rapid rises and falls in the data 
- The methods assume that the seasonal component repeats from year to year
- This method is not robust to unusual events

** X11 Decomposition

This method is based on classical decomposition, but it has many extra steps and features in order to overcome the drawbacks of classical decomposition. 

- trend-cycle estimates are available for all observations 
- the seasonal component is allowed to vary slowly over time 
- has some methods for handling trading day variation, holiday effectsm and effects of known predictions
- it is highly robust to outliers and level shifts in the time series 

#+BEGIN_SRC R :file plot.svg :results graphics file
x11_dcmp <- us_retail_employment %>%
    model(x11 = feasts:::X11(Employed,
                             type = "additive")) %>%
    components()

autoplot(x11_dcmp) +
    xlab("Year") +
    ggtitle("Additive X11 Decomposition of US Retail Employment in the US")
#+END_SRC

#+RESULTS:
[[file:plot.svg]]

#+BEGIN_SRC R :file plot.svg :results graphics file
x11_dcmp %>%
    ggplot(aes(x = Month)) +
    geom_line(aes(y = Employed,
                  color = "Data")) +
    geom_line(aes(y = season_adjust,
                  color = "Seasonality Adjusted")) +
    geom_line(aes(y = trend,
                  color = "Trend")) +
    xlab("Year") + ylab("Persons (Thousands)") +
    ggtitle("Total Employment in US Retail") +
    scale_color_manual(values = c("gray", "blue", "red"),
                       breaks = c("Data", "Seasonality Adjusted", "Trend"))
#+END_SRC

#+RESULTS:
[[file:plot.svg]]

It can be useful to use seasonal plots and seasonal subseries plots of the seasonal component. These help us visualize the variation in the seasonal component over time. 

#+BEGIN_SRC R :file plot.svg :results graphics file
x11_dcmp %>%
    gg_subseries(seasonal)
#+END_SRC

#+RESULTS:
[[file:plot.svg]]

** SEATS Decomposition

SEATS stands for Seasonal Extraction in ARIMA Time Series 

The procedure only works with quarterly and monthly data. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
seats_dcmp <- us_retail_employment %>%
    model(seats = feasts:::SEATS(Employed)) %>%
    components()

seats_dcmp %>% head()
#+END_SRC

#+RESULTS:
| .model | Month    | Employed |   trend | seasonal | irregular | season_adjust |
|--------+----------+----------+---------+----------+-----------+---------------|
| seats  | 1990 Jan |  13255.8 | 13265.2 |      1.0 |       1.0 |       13269.0 |
| seats  | 1990 Feb |  12966.3 | 13244.2 |      1.0 |       1.0 |       13235.2 |
| seats  | 1990 Mar |  12938.2 | 13236.0 |      1.0 |       1.0 |       13237.6 |
| seats  | 1990 Apr |  13012.3 | 13231.8 |      1.0 |       1.0 |       13233.7 |
| seats  | 1990 May |  13108.3 | 13220.6 |      1.0 |       1.0 |       13222.2 |
| seats  | 1990 Jun |  13182.8 | 13204.8 |      1.0 |       1.0 |       13203.7 |

#+BEGIN_SRC R :file plot.svg :results graphics file
autoplot(seats_dcmp) +
    xlab("Year") +
    ggtitle("SEATS Decomposition of Total US Retail Employment")
#+END_SRC

#+RESULTS:
[[file:plot.svg]]

The *seasonal* package has many options for handling variations of X11 and SEATS

http://www.seasonal.website/seasonal.html

** STL Decomposition

STL is an acronym for Seasonal and Trend Decomposition using Loess. 

STL has several advantages over the classical, SEATS and X11 decomposition methods:

- it will handle any type of seasonality
- The seasonal component is allowed to change over time, and the rate of change can be controlled by the user 
- The smoothness of the trend cycle can be controlled the the user 
- It can be robust to outliers 

and its disadvantages:

- it does not handle trading day or calendar variation will 
- it only provides facilities for additive decompositions 
  It is possible to obtain a multiplicative decomposition by first taking logs of the data and then back-transforming the components. 

#+BEGIN_SRC R :file plot.svg :results graphics file
us_retail_employment %>%
    model(STL(Employed ~ trend(window = 7) + season(window = "periodic"),
              robust = TRUE)) %>%
    components() %>%
    autoplot()
#+END_SRC

#+RESULTS:
[[file:plot.svg]]
